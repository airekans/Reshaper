typedef int* PINT;

template <class numtype>
class shareptr
{
public:
	shareptr operator=(const shareptr ptr){
		return this;
	}
};

class A
{
public:
	int GetI()
	{
		return this.m_i;
	};
	void SetI(int val)
	{
		this.m_i = val;
	};
	PINT GetPint()
	{
		return this.m_pint;
	};
	void SetPint(PINT val)
	{
		this.m_pint = val;
	};
	int * GetPi()
	{
		return this.m_pi;
	};
	float GetF()
	{
		return this.m_f;
	};
	void SetF(float val)
	{
		this.m_f = val;
	};
	char GetC()
	{
		return this.m_c;
	};
	bool GetB()
	{
		return this.m_b;
	};
	void SetB(bool val)
	{
		this.m_b = val;
	};
	int m_fpu();
private:
	int m_i;
	PINT m_pint;
	int * m_pi;
	float m_f;
	char m_c;
	bool m_b;
	int m_i3;
	int m_pri;
	int m_fpi();
public:
	int GetI3()
	{
		return this.m_i3;
	};
	void SetI3(int val)
	{
		this.m_i3 = val;
	};
};

class B
{
public:
	int GetI()
	{
		return this.m_i;
	};
	const A& GetA()
	{
		return this.m_a;
	};
	void SetA(A val)
	{
		this.m_a = val;
	};
	const struct C& GetC()
	{
		return this.m_c;
	};
	const shareptr<int>& GetSp1()
	{
		return this.m_sp1;
	};
	void SetSp1(shareptr<int> val)
	{
		this.m_sp1 = val;
	};
	const shareptr<int>& GetSp2()
	{
		return this.m_sp2;
	};
private:
	int m_i;
	A m_a;
	struct C m_c;
	shareptr<int> m_sp1;
	shareptr<int> m_sp2;
};

struct C
{
};
